"""
title: n8n Webhook Trigger
author: Akshay Rao
author_url: https://github.com/akshay7394
git_url: https://github.com/akshay7394/n8n-openwebui-webhook
description: This tool sends a JSON payload to an n8n webhook URL
required_open_webui_version: 0.4.0
requirements: requests
version: 0.1.0
licence: MIT
"""

import requests
from pydantic import BaseModel, Field
from typing import Any, Dict

class Tools:
    class UserValves(BaseModel):
        webhook_url: str = Field(
            ...,  # Required
            description="Full URL of the n8n webhook (e.g., https://n8n.example.com/webhook/endpoint)"
        )

    def __init__(self):
        self.citation = False

    def trigger_n8n_webhook_with_response(self, payload: Dict[str, Any], __user__: dict) -> str:
        """
        Sends a JSON payload to a configured n8n webhook and returns response content.

        :param payload: A dictionary representing the body of the POST request
        :param __user__: The user context containing UserValves
        :return: A string report with the HTTP status and response content
        """
        webhook_url = __user__["valves"].webhook_url

        try:
            response = requests.post(webhook_url, json=payload, timeout=15)
            response.raise_for_status()
            
            try:
                response_data = response.json()
                result = f"✅ Webhook triggered successfully.\n\n**Status Code:** {response.status_code}\n**Response (JSON):**\n```json\n{response_data}\n```"
            except ValueError:
                result = f"✅ Webhook triggered successfully.\n\n**Status Code:** {response.status_code}\n**Response (Text):**\n```text\n{response.text}\n```"

            return result

        except requests.exceptions.RequestException as e:
            return f"❌ Failed to trigger webhook:\n```text\n{str(e)}\n```"
